labeller = labeller(freqs = freqs.labs))+
ylab("#count")
###################################################
# Plotting
###################################################
data %>% ggplot(aes(x=roi, y=cv))+
geom_point(aes(color=freqs), size=.5)+
facet_wrap(zeros ~ freqs)
###################################################
# Plotting
###################################################
data %>% ggplot(aes(x=muT, y=cv))+
geom_point(aes(color=roi), size=.5)+
facet_wrap(zeros ~ freqs)
###################################################
# Plotting
###################################################
filter(data, zeros==0) %>% ggplot(aes(x=muT, y=cv))+
geom_point(aes(color=roi), size=.5)+
facet_wrap(~ freqs)
###################################################
# Plotting
###################################################
filter(data, zeros==0) %>% ggplot(aes(x=muT, y=cv))+
geom_point(aes(), size=.5)+
facet_wrap(~ freqs)
###################################################
# Plotting
###################################################
filter(data, zeros==0) %>% ggplot(aes(x=muT, y=cv))+
geom_point(aes(), size=.5)+
facet_wrap(~ freqs, ncol=5)
###################################################
# Plotting
###################################################
filter(data, zeros==1) %>% ggplot(aes(x=muT, y=cv))+
geom_point(aes(), size=.5)+
facet_wrap(~ freqs, ncol=5)
###################################################
# Plotting
###################################################
filter(data, zeros==0) %>% ggplot(aes(x=muT, y=cv))+
geom_point(aes(), size=.5)+
facet_wrap(~ freqs, ncol=5)
filter(data, zeros==0) %>% ggplot(aes(x=muT, y=cv))+
geom_boxplot(aes())+
facet_wrap(~ freqs, ncol=5)
freqs.labs <- c("3 Hz", "11 Hz", "19 Hz", "27 Hz", "35 Hz",
"43 Hz", "51 Hz", "59 Hz", "67 Hz", "75 Hz")
names(freqs.labs) <- list(3, 11, 19, 27, 35, 43, 51, 59, 67, 75)
filter(data, zeros==0) %>% ggplot(aes(x=cv))+
stat_bin(aes(y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
filter(data, zeros==0) %>% ggplot(aes(x=cv))+
geom_histogram(aes(color=freqs))
filter(data, zeros==0) %>% ggplot(aes(x=cv, color=freqs))+
stat_bin(aes(y=..count../sum(..count..)),
geom="step", bins=100)#+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
names(freqs.labs) <- list(3, 11, 19, 27, 35, 43, 51, 59, 67, 75)
filter(data, zeros==0) %>% ggplot(aes(x=cv))+
stat_bin(aes(y=..count../sum(..count..)),
geom="step", bins=100)#+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
filter(data, zeros==0) %>% ggplot(aes(x=cv))+
stat_bin(aes(y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
filter(data, zeros==0) %>% ggplot(aes(x=cv))+
stat_bin(aes(color=roi, y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
View(data)
View(data)
aggregate(data[, 5:8], list(data$roi), mean)
d %>%
group_by(roi) %>%
summarise_at(vars(-mu), funs(mean(., na.rm=TRUE)))
data %>%
group_by(roi) %>%
summarise_at(vars(-mu), funs(mean(., na.rm=TRUE)))
data %>%
group_by(roi) %>%
summarise_at(vars(mu), list(name = mean))
data %>%
group_by(roi) %>%
summarise_at(vars(muT), list(name = mean))
library(umap)
install.packages(umap)
install.packages("umap")
library(umap)
umap
d = filter(data, zeros==0)[ , 3:7]
d
head(d)
d = filter(data, zeros==0)[ , 4:8]
d
umap(d)
?umap
umap(d, config=umap.defaults)
data.umap = umap(data[,4:8])
setwd("~")
library(tidyverse)
library(umap)
# Read burst stats file
bs = read.csv("Documents/bs_stats.csv")
###################################################
# Unwarap stats one in each column
###################################################
data <- bs %>% filter(stats=="mu")
data$stats <- NULL
names(data)[6] <- "mu"
data$std <- (bs %>% filter(stats=="std"))$bs_stats
###################################################
# Unwarap stats one in each column
###################################################
data <- bs %>% filter(stats=="mu")
data$stats <- NULL
names(data)[6] <- "mu"
###################################################
# Unwarap stats one in each column
###################################################
data <- bs %>% filter(stats=="mu")
data$stats <- NULL
names(data)[5] <- "mu"
data$std <- (bs %>% filter(stats=="std"))$bs_stats
data$muT <- (bs %>% filter(statSs=="muT"))$bs_stats
data$cv <- (bs %>% filter(stats=="cv"))$bs_stats
data$muT <- (bs %>% filter(stats=="muT"))$bs_stats
data$cv <- (bs %>% filter(stats=="cv"))$bs_stats
head(data)
umap
data.umap = umap(data[,4:8])
data.umap = umap(data[,4:8], method = "umap-learn")
Y
Y
data.umap = umap(data[,4:8], method = "umap-learn")
write_csv(data, "bs_stats.csv")
bs = read.csv("burstness.csv")
head(bs)
data = bs
theme_set(
theme_gray() + theme(legend.position = "right")
)
freqs.labs <- c("3 Hz", "11 Hz", "19 Hz", "27 Hz", "35 Hz",
"43 Hz", "51 Hz", "59 Hz", "67 Hz", "75 Hz")
names(freqs.labs) <- list(3, 11, 19, 27, 35, 43, 51, 59, 67, 75)
data%>% ggplot(aes(x=cv))+
stat_bin(aes(color=stages, y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
data%>% ggplot(aes(x=burstness))+
stat_bin(aes(color=stages, y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
library(tidyverse)
data%>% ggplot(aes(x=burstness))+
stat_bin(aes(color=stages, y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
data%>% ggplot(aes(x=burstness))+
stat_bin(aes(y=..count../sum(..count..)),
geom="step", bins=100)+
facet_wrap(~ freqs, ncol=5,
labeller = labeller(freqs = freqs.labs))+
ylab("#count")
data %>% ggplot(aes(x=roi, y=burstness))+
geom_boxplot(aes(color=stages))+
facet_wrap(~ freqs, ncol=5)
data %>% ggplot(aes(x=roi, y=burstness))+
geom_boxplot(aes(color=freqs))+
facet_wrap(~ freqs, ncol=5)
filter(data, freqs==3) %>% ggplot(aes(x=roi, y=burstness))+
geom_boxplot(aes())#+
filter(data, freqs==3) %>% ggplot(aes(x=roi, y=burstness))+
geom_point(aes())#+
# Libraries
library(ggraph)
library(igraph)
library(tidyverse)
library(RColorBrewer)
session = 0
################################################################################
# Loading data
################################################################################
df = read.csv(
paste(
c("Results/lucy/significance_analysis/n_edges_",
session, ".csv"),
collapse="")
)
# Get frequencies
freqs <- unique(df$freqs)
stats <- unique(df$p)
session = 0
################################################################################
# Loading data
################################################################################
df = read.csv(
paste(
c("Results/lucy/significance_analysis/n_edges_",
session, ".csv"),
collapse="")
)
setwd("~/storage1/projects/GrayData-Analysis")
library(igraph)
library(tidyverse)
library(RColorBrewer)
session = 0
################################################################################
# Loading data
################################################################################
df = read.csv(
paste(
c("Results/lucy/significance_analysis/n_edges_",
session, ".csv"),
collapse="")
)
# Get frequencies
freqs <- unique(df$freqs)
stats <- unique(df$p)
frequency=3
stats='t'
# Filtering properties
df_filt <- df %>% filter(freqs==frequency,
p==stat)
weights <- df_filt$n_edges
################################################################################
# Creating network
################################################################################
edges <- df_filt %>% select(6:7)
edges$weights <- weights
edges <- edges %>%
rename(from = sources,
to = targets)
# Filtering properties
df_filt <- df %>% filter(freqs==frequency,
p==stat)
stat
stat='t'
# Filtering properties
df_filt <- df %>% filter(freqs==frequency,
p==stat)
weights <- df_filt$n_edges
################################################################################
# Creating network
################################################################################
edges <- df_filt %>% select(6:7)
edges$weights <- weights
edges <- edges %>%
rename(from = sources,
to = targets)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Assign coordinates to nodes
delta_theta <- pi/10
theta <- seq(0, 2*pi, delta_theta)
x_pos <- list()
y_pos <- list()
for(ang in theta) {
x_pos <- append(x_pos, cos(ang))
y_pos <- append(y_pos, sen(ang))
}
theta <- seq(0, 2*pi, 2*pi/(n_rois-1))
x_pos <- list()
y_pos <- list()
for(ang in theta) {
x_pos <- append(x_pos, cos(ang))
y_pos <- append(y_pos, sin(ang))
}
plot(x_pos, y_pos)
################################################################################
# Method to plot network
################################################################################
create_graph <- function(frequency, stat) {
# Filtering properties
df_filt <- df %>% filter(freqs==frequency,
p==stat)
weights <- df_filt$n_edges
################################################################################
# Creating network
################################################################################
edges <- df_filt %>% select(6:7)
edges$weights <- weights
edges <- edges %>%
rename(from = sources,
to = targets)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Assign coordinates to nodes
delta_theta <- pi/10
theta <- seq(0, 2*pi, 2*pi/(n_rois-1))
x_pos <- list()
y_pos <- list()
for(ang in theta) {
x_pos <- append(x_pos, cos(ang))
y_pos <- append(y_pos, sin(ang))
}
# Sorting according to strength
edges <- edges[order(edges$weights),]
# create a vertices data.frame. One line per object of our hierarchy
vertices  <-  data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
#edge_width <- edges$weights
#edge_width <- (edge_width/max(edge_width))**10
# Creating plot
p <- ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(filter=edges$weights>=20, color=edges$weights),
width=1, alpha=0.8) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="# sig. edges") +
geom_node_point(aes(x = x_pos*1.07, y=y_pos*1.07, size=strengths, color=name,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=name, x=x*1.2, y=y*1.2, color=name), size=2,
alpha=1, show.legend=FALSE) +
theme_void() +
#ggtitle(paste(c(stat, "-test, freq = ", frequency, " Hz"), collapse="")) +
theme(
#plot.title = element_text(hjust = 0.5),
plot.margin=unit(c(0,0,0,0),"cm")
)
ggsave(
paste(c("figures/sig_anal/", stat, "_test_freq_", frequency, "_session_",
session, ".png"),
collapse=""),
dpi=600)
}
################################################################################
# saving plots
################################################################################
idx <- 1
for(f in freqs) {
for(s in stats) {
create_graph(f, s)
idx <- idx + 1
}
}
x_pos
as.numeric(x_pos)
################################################################################
# Method to plot network
################################################################################
create_graph <- function(frequency, stat) {
# Filtering properties
df_filt <- df %>% filter(freqs==frequency,
p==stat)
weights <- df_filt$n_edges
################################################################################
# Creating network
################################################################################
edges <- df_filt %>% select(6:7)
edges$weights <- weights
edges <- edges %>%
rename(from = sources,
to = targets)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Assign coordinates to nodes
delta_theta <- pi/10
theta <- seq(0, 2*pi, 2*pi/(n_rois-1))
x_pos <- list()
y_pos <- list()
for(ang in theta) {
x_pos <- append(x_pos, cos(ang))
y_pos <- append(y_pos, sin(ang))
}
x_pos <- as.numeric(x_pos)
y_pos <- as.numeric(y_pos)
# Sorting according to strength
edges <- edges[order(edges$weights),]
# create a vertices data.frame. One line per object of our hierarchy
vertices  <-  data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
#edge_width <- edges$weights
#edge_width <- (edge_width/max(edge_width))**10
# Creating plot
p <- ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(filter=edges$weights>=20, color=edges$weights),
width=1, alpha=0.8) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="# sig. edges") +
geom_node_point(aes(x = x_pos*1.07, y=y_pos*1.07, size=strengths, color=name,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=name, x=x*1.2, y=y*1.2, color=name), size=2,
alpha=1, show.legend=FALSE) +
theme_void() +
#ggtitle(paste(c(stat, "-test, freq = ", frequency, " Hz"), collapse="")) +
theme(
#plot.title = element_text(hjust = 0.5),
plot.margin=unit(c(0,0,0,0),"cm")
)
ggsave(
paste(c("figures/sig_anal/", stat, "_test_freq_", frequency, "_session_",
session, ".png"),
collapse=""),
dpi=600)
}
################################################################################
# saving plots
################################################################################
idx <- 1
for(f in freqs) {
for(s in stats) {
create_graph(f, s)
idx <- idx + 1
}
}
################################################################################
# Method to plot network
################################################################################
create_graph <- function(frequency, stat) {
# Filtering properties
df_filt <- df %>% filter(freqs==frequency,
p==stat)
weights <- df_filt$n_edges
################################################################################
# Creating network
################################################################################
edges <- df_filt %>% select(6:7)
edges$weights <- weights
edges <- edges %>%
rename(from = sources,
to = targets)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Assign coordinates to nodes
delta_theta <- pi/10
theta <- seq(0, 2*pi, 2*pi/(n_rois-1))
x_pos <- list()
y_pos <- list()
for(ang in theta) {
x_pos <- append(x_pos, cos(ang))
y_pos <- append(y_pos, sin(ang))
}
x_pos <- as.numeric(x_pos)
y_pos <- as.numeric(y_pos)
# Sorting according to strength
edges <- edges[order(edges$weights),]
# create a vertices data.frame. One line per object of our hierarchy
vertices  <-  data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
#edge_width <- edges$weights
#edge_width <- (edge_width/max(edge_width))**10
# Creating plot
p <- ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(filter=edges$weights>=20, color=edges$weights),
width=1, alpha=0.8) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="# sig. edges") +
geom_node_point(aes(x = x_pos*1.07, y=y_pos*1.07, size=strengths, color=name,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=name, x=x*1.2, y=y*1.2, color='black'), size=2,
alpha=1, show.legend=FALSE) +
theme_void() +
#ggtitle(paste(c(stat, "-test, freq = ", frequency, " Hz"), collapse="")) +
theme(
#plot.title = element_text(hjust = 0.5),
plot.margin=unit(c(0,0,0,0),"cm")
)
ggsave(
paste(c("figures/sig_anal/", stat, "_test_freq_", frequency, "_session_",
session, ".png"),
collapse=""),
dpi=600)
}
################################################################################
# saving plots
################################################################################
idx <- 1
for(f in freqs) {
for(s in stats) {
create_graph(f, s)
idx <- idx + 1
}
}
2*pi/(n_rois-1)
