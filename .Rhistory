myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/coh_141017.png", dpi=300, width = 30, height = 8)
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "coh_st", 0.01)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/coh_141017.png", dpi=300, width = 30, height = 8)
################################################################################
# Create igraph object
################################################################################
create_graph <- function(frequency, plot, cut) {
p_filt <- power %>% filter(freqs==frequency)
df_filt <- df %>% filter(f==frequency)
edges <- df_filt %>% select(s, t, plot)
edges <- edges %>%
rename(from = s,
to = t,
weights = plot)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# create a vertices data.frame. One line per object of our hierarchy
vertices <- data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
width <- edges$weights/max(edges$weights)
################################################################################
# Create plot
################################################################################
p<-ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(filter=edges$weights>=cut,
color=edges$weights, width=width**2),
alpha=0.8) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="NLI") +
geom_node_point(aes(x = x*1.07, y=y*1.07, size=p_filt$power*1e10,
color=p_filt$roi,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=p_filt$roi, x=x*1.15, y=y*1.15), color="black",
size=2, alpha=1, show.legend=FALSE) +
theme_void() +
ggtitle(paste(c("freq = ", frequency, " Hz"), collapse="")) +
theme(
plot.title = element_text(hjust = 0.5, size=10),
plot.margin=unit(c(0,0,0,0),"cm")
)
return(p)
}
################################################################################
# Creating plots
################################################################################
myplots <- vector('list', length(freqs))
i<-1
p1 <- create_graph(f, "nli", 0.0)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
for(f in frequencies) {
p1 <- create_graph(f, "nli", 0.0)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
################################################################################
# Creating plots
################################################################################
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "nli", 0.0)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/nli_141017.png", dpi=300, width = 30, height = 8)
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "coh_st", 0.00)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/coh_141017.png", dpi=300, width = 30, height = 8)
edges
sort(edges$weights, index.return=TRUE)
sort(edges$weights, index.return=TRUE)[:100]
sort(edges$weights, index.return=TRUE)[100:-1]
sort(edges$weights, index.return=TRUE)[(100:-1)]
sort(edges$weights, index.return=TRUE)[(100:)]
sort(edges$weights, index.return=TRUE)[-(100:1)]
(1:10)
(1:10)[-(1:4)]
(1:10)[-(1:100)]
sort(edges$weights, index.return = TRUE)[-(1:100)]
sort(edges$weights, index.return = TRUE)
sort(edges$weights, index.return = TRUE)
val, ix = sort(edges$weights, index.return = TRUE)
(val, ix) = sort(edges$weights, index.return = TRUE)
x = sort(edges$weights, index.return = TRUE)
x$ix
x$ix[-(1:100)]
x
x$ix[-(1:100)]
idx <- x$ix[-(1:100)]
idx
edges[idx]
edges[idx,]
idx <- x$ix[(1:n_pairs-100)]
n_pairs
idx <- x$ix[(1:n_pairs-100)]
x$ix[(1:n_pairs-100)]
x <- sort(edges$weights, index.return = TRUE)
x$ix[(1:n_pairs-100)]
n_pairs
x$ix[1:n_pairs-100]
x$ix[1:4271]
n_pairs-100
up<-n_pairs-100
x$ix[(1:up)]
up <- n_pairs - top
top <- 1--
top <- 1--
top <- 100
top<-100
x <- sort(edges$weights, index.return = TRUE)
up <- n_pairs - top
x$ix[(1:up)]
idx <- x$ix[(1:up)]
edges$weights[idx,]
edges$weights[idx]
edges$weights[idx]<-0
edges
# Libraries
library(ggraph)
library(ggpubr)
library(igraph)
library(tidyverse)
library(RColorBrewer)
session = 0
################################################################################
# Loading data
################################################################################
session = 141017
df <- read.csv(
paste(
c("Results/lucy/nli/nli_",
session, ".csv"),
collapse="")
)
# File with area names
power <- read.csv(
paste(
c("Results/lucy/nli/mean_power_",
session, ".csv"),
collapse="")
)
# Get frequencies
frequencies <- unique(df$f)
################################################################################
# Create igraph object
################################################################################
create_graph <- function(frequency, plot, top) {
p_filt <- power %>% filter(freqs==frequency)
df_filt <- df %>% filter(f==frequency)
edges <- df_filt %>% select(s, t, plot)
edges <- edges %>%
rename(from = s,
to = t,
weights = plot)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Keep only top edges
x <- sort(edges$weights, index.return = TRUE)
up <- n_pairs - top
idx <- x$ix[(1:up)]
edges$weights[idx]<-0
# create a vertices data.frame. One line per object of our hierarchy
vertices <- data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
width <- edges$weights/max(edges$weights)
################################################################################
# Create plot
################################################################################
#filter=edges$weights>=cut,
p<-ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(color=edges$weights),
alpha=0.8, width=0.1) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="NLI") +
geom_node_point(aes(x = x*1.07, y=y*1.07, size=p_filt$power*1e10,
color=p_filt$roi,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=p_filt$roi, x=x*1.15, y=y*1.15), color="black",
size=2, alpha=1, show.legend=FALSE) +
theme_void() +
ggtitle(paste(c("freq = ", frequency, " Hz"), collapse="")) +
theme(
plot.title = element_text(hjust = 0.5, size=10),
plot.margin=unit(c(0,0,0,0),"cm")
)
return(p)
}
################################################################################
# Creating plots
################################################################################
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "nli", 100)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
################################################################################
# Create igraph object
################################################################################
create_graph <- function(frequency, plot, top) {
p_filt <- power %>% filter(freqs==frequency)
df_filt <- df %>% filter(f==frequency)
edges <- df_filt %>% select(s, t, plot)
edges <- edges %>%
rename(from = s,
to = t,
weights = plot)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Keep only top edges
x <- sort(edges$weights, index.return = TRUE)
up <- n_pairs - top
idx <- x$ix[(1:up)]
edges$weights[idx]<-0
# create a vertices data.frame. One line per object of our hierarchy
vertices <- data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
width <- edges$weights/max(edges$weights)
################################################################################
# Create plot
################################################################################
#filter=edges$weights>=cut,
p<-ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(filter=edges$weights>0,
color=edges$weights),
alpha=0.8, width=0.1) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="NLI") +
geom_node_point(aes(x = x*1.07, y=y*1.07, size=p_filt$power*1e10,
color=p_filt$roi,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=p_filt$roi, x=x*1.15, y=y*1.15), color="black",
size=2, alpha=1, show.legend=FALSE) +
theme_void() +
ggtitle(paste(c("freq = ", frequency, " Hz"), collapse="")) +
theme(
plot.title = element_text(hjust = 0.5, size=10),
plot.margin=unit(c(0,0,0,0),"cm")
)
return(p)
}
################################################################################
# Creating plots
################################################################################
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "nli", 100)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/nli_141017.png", dpi=300, width = 30, height = 8)
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "coh_st", 0.00)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/coh_141017.png", dpi=300, width = 30, height = 8)
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "coh_st", 100)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/coh_141017.png", dpi=300, width = 30, height = 8)
################################################################################
# Create igraph object
################################################################################
create_graph <- function(frequency, plot, top) {
p_filt <- power %>% filter(freqs==frequency)
df_filt <- df %>% filter(f==frequency)
edges <- df_filt %>% select(s, t, plot)
edges <- edges %>%
rename(from = s,
to = t,
weights = plot)
rois <- unique(c(as.character(edges$from), as.character(edges$to)))
n_rois <- length(rois)
n_pairs <- length(weights)
# Keep only top edges
x <- sort(edges$weights, index.return = TRUE)
up <- n_pairs - top
idx <- x$ix[(1:up)]
edges$weights[idx]<-0
# create a vertices data.frame. One line per object of our hierarchy
vertices <- data.frame(
name =  rois,
value = runif(n_rois)
)
# Create a graph object
graph <- igraph::graph_from_data_frame( edges, directed=FALSE, vertices=vertices )
strengths <- igraph::strength(graph = graph, weights = edges$weights)
width <- edges$weights/max(edges$weights)
################################################################################
# Create plot
################################################################################
#filter=edges$weights>=cut,
p<-ggraph(graph, layout = 'linear', circular = TRUE) +
geom_edge_arc(aes(filter=edges$weights>0,
color=edges$weights),
alpha=0.8, width=1) +
scale_edge_colour_distiller(palette = "YlOrRd", direction=1,
name="NLI") +
geom_node_point(aes(x = x*1.07, y=y*1.07, size=p_filt$power*1e10,
color=p_filt$roi,
alpha=0.2), show.legend=FALSE) +
geom_node_text(aes(label=p_filt$roi, x=x*1.15, y=y*1.15), color="black",
size=2, alpha=1, show.legend=FALSE) +
theme_void() +
ggtitle(paste(c("freq = ", frequency, " Hz"), collapse="")) +
theme(
plot.title = element_text(hjust = 0.5, size=10),
plot.margin=unit(c(0,0,0,0),"cm")
)
return(p)
}
################################################################################
# Creating plots
################################################################################
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "nli", 100)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/nli_141017.png", dpi=300, width = 30, height = 8)
myplots <- vector('list', length(freqs))
i<-1
for(f in frequencies) {
p1 <- create_graph(f, "coh_st", 100)
myplots[[i]] <- local({
i <- i
print(p1)
})
i <- i + 1
}
ggarrange(myplots[[1]],
myplots[[2]],
myplots[[3]],
myplots[[4]],
myplots[[5]],
myplots[[6]],
myplots[[7]],
myplots[[8]],
myplots[[9]],
myplots[[10]],
labels = c("A", "B", "C", "D", "E",
"F", "G", "H", "I", "J"),
ncol = 5, nrow = 2)
ggsave("figures/nli/coh_141017.png", dpi=300, width = 30, height = 8)
